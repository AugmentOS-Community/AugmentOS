services:
  # Build shared packages first
  shared-packages:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app
      - /app/node_modules
    command: >
      bash -c "bun install && 
              cd packages/utils && bun run build &&
              cd ../sdk && bun run build &&
              cd ../config && bun run build &&
              cd ../agents && bun run build"
    networks:
      - augmentos-network
    environment:
      - SERVICE_NAME=shared-packages

  # Cloud service
  cloud:
    stop_grace_period: 10s
    init: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          memory: 256M
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - target: 80
        published: ${CLOUD_PORT:-7002}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=cloud
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
    command: bash -c "bun install && cd packages/cloud && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
    labels:
      com.datadoghq.ad.logs: '[{"source": "cloud", "service": "cloud"}]'

  # Live Captions service
  live-captions:
    stop_grace_period: 5s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${LIVE_CAPTIONS_PORT:-7010}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=live-captions
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/livecaptions && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "live-captions", "service": "live-captions"}]'

  # Flash service
  flash:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${FLASH_PORT:-7011}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=flash
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/flash && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "flash", "service": "flash"}]'

  # Dashboard Manager service
  dashboard-manager:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${DASHBOARD_MANAGER_PORT:-7012}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=dashboard-manager
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/dashboard-manager && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "dashboard-manager", "service": "dashboard-manager"}]'

  # Notifications service
  notify:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${NOTIFY_PORT:-7014}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=notify
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/notify && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "notify", "service": "notify"}]'

  # Mira AI service
  mira:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${MIRA_PORT:-7015}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=mira
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/miraai && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "mira", "service": "mira"}]'

  live-translation:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${LIVE_TRANSLATION_PORT:-7017}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=live-translation
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/livetranslation && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
    labels:
      com.datadoghq.ad.logs: '[{"source": "live-translation", "service": "live-translation"}]'

  # Datadog agent
  datadog:
    image: datadog/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    env_file:
      - .env
      - .env.production
    environment:
      - DD_API_KEY=${DATADOG_API_KEY}
      - DD_SITE=us5.datadoghq.com
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_APM_ENABLED=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_LOGS_CONFIG_PROCESSING_RULES=[{"type":"exclude_at_match","name":"exclude_debug_logs","pattern":"\\[debug\\]"}]
      - DD_LOGS_CONFIG_OPEN_FILES_LIMIT=200
      - DD_CONTAINER_EXCLUDE_LOGS=name:datadog-agent
    restart: unless-stopped
    networks:
      - augmentos-network

networks:
  augmentos-network:
    driver: bridge
    external: true

volumes:
  node_modules: